Please write a Rust program that implements calling Groq model "moonshotai/kimi-k2-instruct" with auth token from an environment variable GROQ_API_KEY. Do not stop the output until you output the whole program. The code MUST compile from the first shot.

Do not use any markdown separators please.

I would like you to have the code accept two mandatory arguments being input and output files names, 
and the code should do the following with them:

- if the output file is non-existent or empty, it should just feed the contents of the input file after the following preamble: 

   "Please produce a detailed specification which will allow to recreate the implementation below from first principles:"; 

- if the file exists, then the prompt needs to be different:

   "Please verify that the implementation below (enclosed into <result-specimen></result-specimen>) is accurately described by the specification (enclosed into <result-specification></result-specification>) as much as possible. If it does - then simply output the content of the result-specification verbatim. If you find that there are imperfections in how result-specification describes the specimen, then incrementally improve it and output the full result, with your improvements. Do not delimit the result with anything, output it verbatim." 

Save the response from LLM into the file having the file with the name like the output file but with ".draft" appended to it. 

After obtaining the reply from LLM, and before rewriting the output result file, it should submit another request with the following prompt: "Please CAREFULLY evaluate the below specimen (enclosed into <result-specimen></result-specimen>), and two outputs corresponding to this description, first one enclosed into "<first-specification></first-specification>" and the second enclosed into "<second-specification></second-specification>", and evaluate which of the two is more precise and correct in describing the specimen. Then, if the first result is better, output the phrase 'First specification is better.', if the second description is better, output the phrase 'The second spec is better.'. Output only one of the two phrases, and nothing else"

Then, include the contents of the file with the implementation (first program argument is the file name), the original specification (file name is the second argument), and the content of the first LLM response, and check the reply from the LLM.
If the response is "The second spec is better." then the program would write the content of the output of the model into the output file name.

If the response is "First specification is better." then do nothing but just update the mtime attribute on the file so it is seen as modified by an underlying OS.

If the response is anything else then exit with an error.

Important: do not delete the draft file, unless you have used the result from it - keep it for diagnostic purposes in case of error or bad suggestions - however, if its contents are not accepted, rename it with ".rej" instead of ".draft".

Use lower temperature (0.1) and fewer max_tokens (100) for the evaluation call to get more consistent responses.

Provide clear error messages and status updates.

Only update the file when the new specification is deemed better.

