/* This file has been autogenerated from instruct */

use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize)]
struct GenerateRequest {
    model: String,
    prompt: String,
    stream: bool,
}

#[derive(Debug, Deserialize)]
struct GenerateResponse {
    response: String,
}

#[derive(Debug, Deserialize)]
struct Model {
    name: String,
}

#[derive(Debug, Deserialize)]
struct ModelsResponse {
    models: Vec<Model>,
}

#[derive(Debug, Clone)]
pub struct OllamaClient {
    base_url: String,
    client: reqwest::Client,
}

impl OllamaClient {
    pub fn new(base_url: impl Into<String>) -> Self {
        Self {
            base_url: base_url.into(),
            client: reqwest::Client::new(),
        }
    }

    pub async fn generate(&self, model: &str, prompt: &str) -> Result<String, reqwest::Error> {
        let url = format!("{}/api/generate", self.base_url);
        let body = GenerateRequest {
            model: model.to_string(),
            prompt: prompt.to_string(),
            stream: false,
        };

        let resp: GenerateResponse = self
            .client
            .post(&url)
            .json(&body)
            .send()
            .await?
            .json()
            .await?;

        Ok(resp.response)
    }

    pub async fn list_models(&self) -> Result<Vec<String>, reqwest::Error> {
        let url = format!("{}/api/tags", self.base_url);
        let resp: ModelsResponse = self.client.get(&url).send().await?.json().await?;
        Ok(resp.models.into_iter().map(|m| m.name).collect())
    }
}